@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <h3>Modificar datos Boleta</h3>
        <div>
                <label>¿Fue Usada?:</label>
                <select class="form-control" @bind="ticket.FueUsada">
                <option value="0">Seleccione una opción</option>
                <option value=True>Si</option>
                <option value=False>No</option>
                </select>
            <ValidationMessage For="@(()=>ticket.FueUsada)" />
        </div>
        <div>
            <label>Fecha Uso:</label>
            <InputDate class="form-control" asp-for="DateTime" @bind-Value="@ticket.FechaUso" />
            <ValidationMessage For="@(()=>ticket.FechaUso)" />
        </div>
        <div>
        <label>Portería:</label>
            <select class="form-control" @bind="ticket.Porteria">
                <option value="0">Seleccione una portería</option>
                <option value="Norte">Norte</option>
                <option value="Sur">Sur</option>
                <option value="Oriental">Oriental</option>
                <option value="Occidental">Occidental</option>
            </select>
            <ValidationMessage For="@(()=>ticket.Porteria)" />
        </div>
        <button class="btn btn-primary" type="submit">Guardar Cambios</button>
        <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;


    [Parameter]
    [EditorRequired]
    public Ticket ticket { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(ticket);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully)
        {
            return;
        }
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Desea abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }

}