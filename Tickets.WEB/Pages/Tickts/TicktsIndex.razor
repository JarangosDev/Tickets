@page "/tickets"
@using Tickets.Shared.Entites;
@using Tickets.WEB.Repositories;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


<h3>Validar Boleta</h3>

<GenericList MyList="Tickets">
    <Body>
        <div class="mb-6">
            <label>ID de Boleta:</label>
            <div>
                <input class="form-control" type="text" @bind-value="@Id" placeholder="Digite el id del boleto" />
               <button class="btn btn-success"> Validar</button>
            </div>
        </div>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID Boleta</th>
                    <th>Fecha Uso</th>
                    <th>¿Fue usada?</th>
                    <th>Portería</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ticket in Tickets!)
                {
                    <tr>
                        <td>
                            @ticket.Id
                        </td>
                        <td>
                            @ticket.FechaUso
                        </td>
                        <td>
                            @ticket.FueUsada
                        </td>
                        <td>
                            @ticket.Porteria
                        </td>
                        <td>
                            <a href="/tickets/edit/@ticket.Id" class="btn btn-warning">Editar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Ticket>? Tickets { get; set; }

    private int Id;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    public Ticket? Ticket;

    //private async task valid()
    //{
    //    var responsehttp = await repository.get<ticket>($"api/tickets/{id}");

    //    if (responsehttp.error)
    //    {
    //        if (responsehttp.httpresponsemessage.statuscode == system.net.httpstatuscode.notfound)
    //        {
    //            await sweetalertservice.fireasync("la boleta no está en la base de datos"," ", sweetalerticon.error);
    //            return;
    //        }
    //        else
    //        {
    //            var messageerror = await responsehttp.geterrormessageasync();
    //            await sweetalertservice.fireasync("error", messageerror, SweetAlertIcon.error);
    //        }
    //    }
    //    else
    //    {
    //        ticket = responsehttp.response;
    //        if (ticket!.fueusada)
    //        {
    //            await sweetalertservice.fireasync("error", $"la boleta ya fue usada: hora de uso: {ticket.fueusada} porteria: {ticket.porteria}", sweetalerticon.error);
    //            return;
    //        }
    //      }
    //}


    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Ticket>>("/api/tickets");
        Tickets = responseHttp.Response!;
    }
    private async Task DeleteAsync(int Id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente desea eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        var responseHttp = await repository.Delete($"/api/countries/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
}
